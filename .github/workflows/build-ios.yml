name: Build IOS
on:
  workflow_call:
    inputs:
      version_file:
        type: string
        required: true
      macos_version:
        type: string
        required: true
      xcode_version:
        type: string
        required: true
      version:
        type: string
        required: true
      prefix:
        type: string
        required: true
env:
  GOPRIVATE: github.com/getlantern
  S3_BUCKET: lantern
jobs:
  build-ios:
    runs-on: ${{ inputs.macos_version }}
    permissions:
      contents: "read"
      id-token: "write"
    env:
      version: ${{ inputs.version }}
      version_file: ${{ inputs.version_file }}
      prefix: ${{ inputs.prefix }}
      AC_USERNAME: accounts@getlantern.org
      AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: Pull LFS objects
        run: git lfs pull

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ inputs.xcode_version }}

      - name: Repo access
        run: |
          mkdir /tmp/cache
          echo "machine github.com login ${{ secrets.GH_TOKEN }} password x-oauth-basic" > /tmp/cache/.netrc
          chmod 600 /tmp/cache/.netrc

      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@v1
        with:
          version: latest
          token: ${{ SECRETS.SENTRY_TOKEN }} # from GitHub secrets
          organization: getlantern
          project: android

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version-file: pubspec.yaml

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_P12_BASE64 }}
#          BUILD_TUNNEL_CERTIFICATE_BASE64: ${{ secrets.IOS_TUNNEL_CERTIFICATE_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_P12_PASS }}
#          P12_TUNNEL_PASSWORD: ${{ secrets.IOS_TUNNEL_CERTIFICATE_P12_PASS }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE6 }}
          BUILD_TUNNEL_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_TUNNEL_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          EXPORT_OPTIONS: ${{ secrets.EXPORT_OPTION_PLIST }}
        run: |
          set -x
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          TPP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          EXPORT_OPTIONS_PATH=$GITHUB_WORKSPACE/ExportOptions.plist

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          PROVISIONING_PROFILES_DIR=~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -p "$PROVISIONING_PROFILES_DIR"
           
           # apply main provisioning profile
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          # apply tunnel provisioning profile
          echo -n "$BUILD_TUNNEL_PROVISION_PROFILE_BASE64" | base64 --decode -o $TPP_PATH
          cp $TPP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
           # Create ExportOptions.plist
          echo "$EXPORT_OPTIONS" | base64 --decode > "$EXPORT_OPTIONS_PATH"


      - name: Generate FFI bindings
        run: make ffigen

      - name: Generate app.env
        env:
          ANDROID_INTERSTITIAL_AD_ID: ${{ secrets.INTERSTITIAL_AD_UNIT_ID }}
          IOS_INTERSTITIAL_AD_ID: ${{ secrets.INTERSTITIAL_AD_UNIT_ID_IOS }}
        run: |
          touch app.env
          echo "Android_interstitialAd=$ANDROID_INTERSTITIAL_AD_ID" > app.env
          echo "IOS_interstitialAd=$IOS_INTERSTITIAL_AD_ID" >> app.env

      - name: Get dependencies
        run: |
          flutter pub get
      #          cd ios
      #          pod install
      #          cd ..


#      - name : Build iOS app
#        run: flutter build ios --release --no-codesign
#
#      - name: Build iOS app
#        uses: yukiarrr/ios-build-action@v1.12.0
#        with:
#          p12-base64: ${{ secrets.IOS_CERTIFICATE_P12_BASE64 }}
#          certificate-password: ${{ secrets.IOS_CERTIFICATE_P12_PASS }}
#          project-path: ios/Runner.xcodeproj
#          workspace-path: ios/Runner.xcworkspace
#          scheme: prod
#          configuration: Release-prod
#          output-path: Lantern.ipa
#          mobileprovision-base64: |
#            ${{ secrets.IOS_PROVISION_PROFILE_BASE6 }}

      - name: Build iOS app
        run: make ios-release

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ runner.temp }}/build/ios/ipa
          # you can also archive the entire directory
          # path: ${{ runner.temp }}/build
          retention-days: 1