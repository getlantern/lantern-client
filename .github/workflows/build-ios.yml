name: Build IOS
on:
  workflow_call:
    inputs:
      version_file:
        type: string
        required: true
      macos_version:
        type: string
        required: true
      xcode_version:
        type: string
        required: true
      version:
        type: string
        required: true
      prefix:
        type: string
        required: true
env:
  GOPRIVATE: github.com/getlantern
  S3_BUCKET: lantern
jobs:
  build-ios:
    runs-on: ${{ inputs.macos_version }}
    permissions:
      contents: "read"
      id-token: "write"
    env:
      version: ${{ inputs.version }}
      version_file: ${{ inputs.version_file }}
      prefix: ${{ inputs.prefix }}
      AC_USERNAME: accounts@getlantern.org
      AC_PASSWORD: ${{ secrets.AC_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - name: Pull LFS objects
        run: git lfs pull

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ inputs.xcode_version }}

      - name: Repo access
        run: |
          mkdir /tmp/cache
          echo "machine github.com login ${{ secrets.GH_TOKEN }} password x-oauth-basic" > /tmp/cache/.netrc
          chmod 600 /tmp/cache/.netrc

      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@v2
        with:
          version: latest
          token: ${{ SECRETS.SENTRY_TOKEN }} # from GitHub secrets
          organization: getlantern
          project: lantern-ios

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version-file: pubspec.yaml

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_P12_PASS }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE6 }}
          BUILD_TUNNEL_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_TUNNEL_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          EXPORT_OPTIONS: ${{ secrets.EXPORT_OPTION_PLIST }}
        run: |
          set -x
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          TPP_PATH=$RUNNER_TEMP/build_tpp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          EXPORT_OPTIONS_PATH=$GITHUB_WORKSPACE/ExportOptions.plist


          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          PROVISIONING_PROFILES_DIR=~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -p "$PROVISIONING_PROFILES_DIR"
          
           # apply main provisioning profile
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          # apply tunnel provisioning profile
          echo -n "$BUILD_TUNNEL_PROVISION_PROFILE_BASE64" | base64 --decode -o $TPP_PATH
          cp $TPP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
           # Create ExportOptions.plist
          echo "$EXPORT_OPTIONS" | base64 --decode > "$EXPORT_OPTIONS_PATH"

      - name: Generate FFI bindings
        run: |
          make darwin
          make ffigen

      - name: Generate app.env
        env:
          ANDROID_INTERSTITIAL_AD_ID: ${{ secrets.INTERSTITIAL_AD_UNIT_ID }}
          IOS_INTERSTITIAL_AD_ID: ${{ secrets.INTERSTITIAL_AD_UNIT_ID_IOS }}
        run: |
          touch app.env
          echo "Android_interstitialAd=$ANDROID_INTERSTITIAL_AD_ID" > app.env
          echo "IOS_interstitialAd=$IOS_INTERSTITIAL_AD_ID" >> app.env

      - name: Get dependencies & Pod install
        run: |
          flutter pub get
          cd ios
          pod install
          cd ..

      - name: Build iOS app
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: getlantern
          SENTRY_PROJECT_IOS: lantern-ios
        run: make ios-release

      - name: Upload application
        uses: actions/upload-artifact@v4
        with:
          name: Lantern.ipa
          path: ${{ github.workspace }}/build/ios/ipa/Lantern.ipa
          retention-days: 2

      - name: Compress artifacts using bzip2
        run: |
          cd ${{ github.workspace }}/build/ios/ipa/
          bzip2 -zk Lantern.ipa

      - name: Copy .ipa and .bz2 to root
        run: |
          cp ${{ github.workspace }}/build/ios/ipa/Lantern.ipa ${{ github.workspace }}/Lantern.ipa
          cp ${{ github.workspace }}/build/ios/ipa/Lantern.ipa.bz2 ${{ github.workspace }}/Lantern.ipa.bz2

      - name: Install s3cmd
        run: pip install s3cmd

      - name: Set s3cmd permissions
        run: |
          echo "[default]" > "$HOME/.s3cfg"
          echo "access_key = ${{ secrets.AWS_ACCESS_KEY }}" >> "$HOME/.s3cfg"
          echo "secret_key = ${{ secrets.AWS_SECRET_KEY }}" >> "$HOME/.s3cfg"

      - name: Push binaries to s3
        env:
          VERSION: "${{ env.version }}"
          IPA: "${{ env.prefix }}-${{ env.version }}.ipa"
          update: "lantern_update_ios-${{inputs.version}}.bz2"
          update_source: Lantern.ipa.bz2
        run: |
          mv ${{ env.update_source }} ${{ env.update }}
          mv Lantern.ipa "$IPA"
          cp "$IPA" ${{ env.prefix }}.ipa
          echo ${{ env.version }} > ${{ env.version_file }}
          shasum -a 256 "$IPA" | cut -d " " -f 1 > "$IPA".sha256
          shasum -a 256 ${{ env.update }} | cut -d " " -f 1 > ${{ env.update }}.sha256
          cp "$IPA".sha256 ${{ env.prefix }}.ipa.sha256
          s3cmd put --acl-public "$IPA" "$IPA".sha256 ${{ env.update }} ${{ env.update }}.sha256 ${{ env.version_file }} ${{ env.prefix }}.ipa.sha256 ${{ env.prefix }}.ipa "s3://lantern"    
