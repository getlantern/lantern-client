name: Build Windows

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      prefix:
        type: string
        required: true
      build-suffix: # "64" or ""
        type: string
        required: false
      dist-suffix: # "64-bit" or "32-bit"
        type: string
        required: true
      update-suffix: # "x64" or "386"
        type: string
        required: true
      arch:
        type: string
        required: true
      installer-suffix: # "-x64" or ""
        type: string
        required: false

env:
  GOPRIVATE: github.com/getlantern
  S3_BUCKET: lantern
jobs:
  build-windows:
    permissions:
      contents: "read"
      id-token: "write"
    env:
      version: ${{ inputs.version }}
      prefix: ${{ inputs.prefix }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Set up MinGW
        run: choco install mingw -y

      # Install Flutter
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - run: flutter --version

      - name: Setup protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}


      - name: Build Lantern Library
        shell: bash
        run: |
          touch app.env
          mkdir -p "build/windows/${{inputs.arch}}/runner/Release"
          make windows64

      - name: Activate plugins
        run: |
          dart pub global activate protoc_plugin
          dart pub global activate flutter_distributor

      - name: Sign liblantern.dll with Azure Code Signing
        uses: getlantern/trusted-signing-action@main
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://wus2.codesigning.azure.net/
          code-signing-account-name: code-signing
          certificate-profile-name: Lantern
          files-folder: ${{ github.workspace }}\
          files-folder-filter: dll
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Move liblantern.dll to release directory
        shell: bash
        run: |
          mv liblantern_x64.dll "build/windows/${{inputs.arch}}/runner/Release"

      - name: Extract app version from pubspec.yaml
        id: extract_version
        shell: bash
        run: |
          APP_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Build Flutter app
        run: |
          Get-FileHash "build/windows/${{inputs.arch}}/runner/Release/liblantern_x64.dll" -Algorithm SHA256
          New-Item -Path "./dist/${{ env.APP_VERSION }}" -ItemType Directory -Force
          flutter_distributor package --platform windows --targets "exe,msix" --skip-clean
        env:
          SENTRY_AUTH_TOKEN: "${{ secrets.SENTRY_AUTH_TOKEN }}"
          VERSION: "${{ env.version }}"

      - name: Rename installer
        shell: bash
        run: |
          ls -ltr "build/windows/${{inputs.arch}}/runner"
          ls -ltr "build/windows/${{inputs.arch}}/runner/Release"
          mv "dist/${{ env.APP_VERSION }}/lantern-${{ env.APP_VERSION }}-windows-setup.exe" lantern-installer${{inputs.installer-suffix}}.exe

      - name: Sign EXE with Azure Code Signing
        uses: getlantern/trusted-signing-action@main
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://wus2.codesigning.azure.net/
          code-signing-account-name: code-signing
          certificate-profile-name: Lantern
          files-folder: ${{ github.workspace }}\
          files-folder-filter: exe
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Upload EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows${{inputs.build-suffix}}-installer-signed
          path: |
            lantern-installer${{inputs.installer-suffix}}.exe

  upload-windows:
    needs: build-windows
    permissions:
      contents: "read"
      id-token: "write"
    env:
      version: ${{ inputs.version }}
      prefix: ${{ inputs.prefix }}
    runs-on: ubuntu-latest

    steps:
      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: windows${{inputs.build-suffix}}-installer-signed

      - name: Install s3cmd
        run: pip install s3cmd

      - name: Set s3cmd permissions
        run: |
          echo "[default]" > "$HOME/.s3cfg"
          echo "access_key = ${{ secrets.AWS_ACCESS_KEY }}" >> "$HOME/.s3cfg"
          echo "secret_key = ${{ secrets.AWS_SECRET_KEY }}" >> "$HOME/.s3cfg"

      - name: Push binaries to s3
        env:
          VERSION: "${{ inputs.version }}"
          dist_versionless: "${{inputs.prefix}}-${{inputs.dist-suffix}}.exe"
          dist: "${{inputs.prefix}}-${{inputs.version}}-${{inputs.dist-suffix}}.exe"
          update: "lantern_update_windows_${{inputs.update-suffix}}-${{inputs.version}}.bz2"

        run: |
          ls -l
          cat lantern.exe | bzip2 > ${{ env.update }}
          mv lantern-installer${{inputs.installer-suffix}}.exe ${{ env.dist }}

          shasum -a 256 ${{ env.dist }} | cut -d " " -f 1 > ${{ env.dist }}.sha256
          shasum -a 256 ${{ env.update }} | cut -d " " -f 1 > ${{ env.update }}.sha256
          ls -l

          s3cmd put --acl-public ${{ env.dist }} ${{ env.update }} ${{ env.update }}.sha256 ${{ env.dist }}.sha256 "s3://lantern"
