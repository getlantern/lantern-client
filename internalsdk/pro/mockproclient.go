// Code generated by mockery v2.46.3. DO NOT EDIT.

package pro

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"

	protos "github.com/getlantern/lantern-client/internalsdk/protos"

	time "time"
)

// MockProClient is an autogenerated mock type for the ProClient type
type MockProClient struct {
	mock.Mock
}

// DeviceAdd provides a mock function with given fields: ctx, deviceName
func (_m *MockProClient) DeviceAdd(ctx context.Context, deviceName string) (bool, error) {
	ret := _m.Called(ctx, deviceName)

	if len(ret) == 0 {
		panic("no return value specified for DeviceAdd")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, deviceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, deviceName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceRemove provides a mock function with given fields: ctx, deviceId
func (_m *MockProClient) DeviceRemove(ctx context.Context, deviceId string) (*LinkResponse, error) {
	ret := _m.Called(ctx, deviceId)

	if len(ret) == 0 {
		panic("no return value specified for DeviceRemove")
	}

	var r0 *LinkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*LinkResponse, error)); ok {
		return rf(ctx, deviceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *LinkResponse); ok {
		r0 = rf(ctx, deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LinkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmailExists provides a mock function with given fields: ctx, email
func (_m *MockProClient) EmailExists(ctx context.Context, email string) (*protos.BaseResponse, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for EmailExists")
	}

	var r0 *protos.BaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*protos.BaseResponse, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *protos.BaseResponse); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.BaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmailRequest provides a mock function with given fields: ctx, email
func (_m *MockProClient) EmailRequest(ctx context.Context, email string) (*OkResponse, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for EmailRequest")
	}

	var r0 *OkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*OkResponse, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *OkResponse); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*OkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJSON provides a mock function with given fields: ctx, path, params, target
func (_m *MockProClient) GetJSON(ctx context.Context, path string, params any, target any) error {
	ret := _m.Called(ctx, path, params, target)

	if len(ret) == 0 {
		panic("no return value specified for GetJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, any, any) error); ok {
		r0 = rf(ctx, path, params, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPROTOC provides a mock function with given fields: ctx, path, params, target
func (_m *MockProClient) GetPROTOC(ctx context.Context, path string, params any, target protoreflect.ProtoMessage) error {
	ret := _m.Called(ctx, path, params, target)

	if len(ret) == 0 {
		panic("no return value specified for GetPROTOC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, any, protoreflect.ProtoMessage) error); ok {
		r0 = rf(ctx, path, params, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LinkCodeApprove provides a mock function with given fields: ctx, code
func (_m *MockProClient) LinkCodeApprove(ctx context.Context, code string) (*protos.BaseResponse, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for LinkCodeApprove")
	}

	var r0 *protos.BaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*protos.BaseResponse, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *protos.BaseResponse); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.BaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkCodeRedeem provides a mock function with given fields: ctx, deviceName, deviceCode
func (_m *MockProClient) LinkCodeRedeem(ctx context.Context, deviceName string, deviceCode string) (*LinkCodeRedeemResponse, error) {
	ret := _m.Called(ctx, deviceName, deviceCode)

	if len(ret) == 0 {
		panic("no return value specified for LinkCodeRedeem")
	}

	var r0 *LinkCodeRedeemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*LinkCodeRedeemResponse, error)); ok {
		return rf(ctx, deviceName, deviceCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *LinkCodeRedeemResponse); ok {
		r0 = rf(ctx, deviceName, deviceCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LinkCodeRedeemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, deviceName, deviceCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkCodeRequest provides a mock function with given fields: ctx, deviceName
func (_m *MockProClient) LinkCodeRequest(ctx context.Context, deviceName string) (*LinkCodeResponse, error) {
	ret := _m.Called(ctx, deviceName)

	if len(ret) == 0 {
		panic("no return value specified for LinkCodeRequest")
	}

	var r0 *LinkCodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*LinkCodeResponse, error)); ok {
		return rf(ctx, deviceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *LinkCodeResponse); ok {
		r0 = rf(ctx, deviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LinkCodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentMethods provides a mock function with given fields: ctx
func (_m *MockProClient) PaymentMethods(ctx context.Context) (*PaymentMethodsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PaymentMethods")
	}

	var r0 *PaymentMethodsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*PaymentMethodsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *PaymentMethodsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PaymentMethodsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentMethodsV4 provides a mock function with given fields: ctx
func (_m *MockProClient) PaymentMethodsV4(ctx context.Context) (*PaymentMethodsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PaymentMethodsV4")
	}

	var r0 *PaymentMethodsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*PaymentMethodsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *PaymentMethodsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PaymentMethodsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentRedirect provides a mock function with given fields: ctx, req
func (_m *MockProClient) PaymentRedirect(ctx context.Context, req *protos.PaymentRedirectRequest) (*PaymentRedirectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PaymentRedirect")
	}

	var r0 *PaymentRedirectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.PaymentRedirectRequest) (*PaymentRedirectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protos.PaymentRedirectRequest) *PaymentRedirectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PaymentRedirectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protos.PaymentRedirectRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Plans provides a mock function with given fields: ctx
func (_m *MockProClient) Plans(ctx context.Context) (*PlansResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Plans")
	}

	var r0 *PlansResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*PlansResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *PlansResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PlansResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PollUserData provides a mock function with given fields: ctx, session, maxElapsedTime
func (_m *MockProClient) PollUserData(ctx context.Context, session ClientSession, maxElapsedTime time.Duration) {
	_m.Called(ctx, session, maxElapsedTime)
}

// PostFormReadingJSON provides a mock function with given fields: ctx, path, params, target
func (_m *MockProClient) PostFormReadingJSON(ctx context.Context, path string, params any, target any) error {
	ret := _m.Called(ctx, path, params, target)

	if len(ret) == 0 {
		panic("no return value specified for PostFormReadingJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, any, any) error); ok {
		r0 = rf(ctx, path, params, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostJSONReadingJSON provides a mock function with given fields: ctx, path, params, body, target
func (_m *MockProClient) PostJSONReadingJSON(ctx context.Context, path string, params any, body any, target any) error {
	ret := _m.Called(ctx, path, params, body, target)

	if len(ret) == 0 {
		panic("no return value specified for PostJSONReadingJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, any, any, any) error); ok {
		r0 = rf(ctx, path, params, body, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostPROTOC provides a mock function with given fields: ctx, path, params, body, target
func (_m *MockProClient) PostPROTOC(ctx context.Context, path string, params protoreflect.ProtoMessage, body protoreflect.ProtoMessage, target protoreflect.ProtoMessage) error {
	ret := _m.Called(ctx, path, params, body, target)

	if len(ret) == 0 {
		panic("no return value specified for PostPROTOC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, protoreflect.ProtoMessage, protoreflect.ProtoMessage, protoreflect.ProtoMessage) error); ok {
		r0 = rf(ctx, path, params, body, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PurchaseRequest provides a mock function with given fields: ctx, data
func (_m *MockProClient) PurchaseRequest(ctx context.Context, data map[string]interface{}) (*PurchaseResponse, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for PurchaseRequest")
	}

	var r0 *PurchaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) (*PurchaseResponse, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) *PurchaseResponse); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PurchaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedeemResellerCode provides a mock function with given fields: ctx, req
func (_m *MockProClient) RedeemResellerCode(ctx context.Context, req *protos.RedeemResellerCodeRequest) (*protos.BaseResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RedeemResellerCode")
	}

	var r0 *protos.BaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protos.RedeemResellerCodeRequest) (*protos.BaseResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protos.RedeemResellerCodeRequest) *protos.BaseResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.BaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protos.RedeemResellerCodeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReferralAttach provides a mock function with given fields: ctx, refCode
func (_m *MockProClient) ReferralAttach(ctx context.Context, refCode string) (bool, error) {
	ret := _m.Called(ctx, refCode)

	if len(ret) == 0 {
		panic("no return value specified for ReferralAttach")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, refCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, refCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestorePurchase provides a mock function with given fields: ctx, req
func (_m *MockProClient) RestorePurchase(ctx context.Context, req map[string]interface{}) (*OkResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RestorePurchase")
	}

	var r0 *OkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) (*OkResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) *OkResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*OkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryCreateUser provides a mock function with given fields: ctx, ss, maxElapsedTime
func (_m *MockProClient) RetryCreateUser(ctx context.Context, ss ClientSession, maxElapsedTime time.Duration) {
	_m.Called(ctx, ss, maxElapsedTime)
}

// UpdateUserData provides a mock function with given fields: ctx, ss
func (_m *MockProClient) UpdateUserData(ctx context.Context, ss ClientSession) (*protos.User, error) {
	ret := _m.Called(ctx, ss)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserData")
	}

	var r0 *protos.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ClientSession) (*protos.User, error)); ok {
		return rf(ctx, ss)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ClientSession) *protos.User); ok {
		r0 = rf(ctx, ss)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protos.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ClientSession) error); ok {
		r1 = rf(ctx, ss)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCreate provides a mock function with given fields: ctx
func (_m *MockProClient) UserCreate(ctx context.Context) (*UserDataResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UserCreate")
	}

	var r0 *UserDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*UserDataResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *UserDataResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserData provides a mock function with given fields: ctx
func (_m *MockProClient) UserData(ctx context.Context) (*UserDataResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UserData")
	}

	var r0 *UserDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*UserDataResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *UserDataResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserLinkCodeRequest provides a mock function with given fields: ctx, deviceId, email
func (_m *MockProClient) UserLinkCodeRequest(ctx context.Context, deviceId string, email string) (bool, error) {
	ret := _m.Called(ctx, deviceId, email)

	if len(ret) == 0 {
		panic("no return value specified for UserLinkCodeRequest")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, deviceId, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, deviceId, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, deviceId, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserLinkValidate provides a mock function with given fields: ctx, code
func (_m *MockProClient) UserLinkValidate(ctx context.Context, code string) (*UserRecovery, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for UserLinkValidate")
	}

	var r0 *UserRecovery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*UserRecovery, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *UserRecovery); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserRecovery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockProClient creates a new instance of MockProClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProClient {
	mock := &MockProClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
