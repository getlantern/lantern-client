// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// Session is an autogenerated mock type for the Session type
type Session struct {
	mock.Mock
}

// BandwidthUpdate provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Session) BandwidthUpdate(_a0 int, _a1 int, _a2 int, _a3 int) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for BandwidthUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int, int) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatEnable provides a mock function with given fields:
func (_m *Session) ChatEnable() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChatEnable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Code provides a mock function with given fields:
func (_m *Session) Code() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Code")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Currency provides a mock function with given fields:
func (_m *Session) Currency() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Currency")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceOS provides a mock function with given fields:
func (_m *Session) DeviceOS() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeviceOS")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Email provides a mock function with given fields:
func (_m *Session) Email() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Email")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForceReplica provides a mock function with given fields:
func (_m *Session) ForceReplica() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ForceReplica")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAppName provides a mock function with given fields:
func (_m *Session) GetAppName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAppName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCountryCode provides a mock function with given fields:
func (_m *Session) GetCountryCode() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCountryCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDNSServer provides a mock function with given fields:
func (_m *Session) GetDNSServer() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDNSServer")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceID provides a mock function with given fields:
func (_m *Session) GetDeviceID() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForcedCountryCode provides a mock function with given fields:
func (_m *Session) GetForcedCountryCode() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetForcedCountryCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimeZone provides a mock function with given fields:
func (_m *Session) GetTimeZone() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTimeZone")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields:
func (_m *Session) GetToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserID provides a mock function with given fields:
func (_m *Session) GetUserID() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsProUser provides a mock function with given fields:
func (_m *Session) IsProUser() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsProUser")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsStoreVersion provides a mock function with given fields:
func (_m *Session) IsStoreVersion() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStoreVersion")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Locale provides a mock function with given fields:
func (_m *Session) Locale() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Locale")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider provides a mock function with given fields:
func (_m *Session) Provider() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Provider")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SerializedInternalHeaders provides a mock function with given fields:
func (_m *Session) SerializedInternalHeaders() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SerializedInternalHeaders")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAuthEnabled provides a mock function with given fields: _a0
func (_m *Session) SetAuthEnabled(_a0 bool) {
	_m.Called(_a0)
}

// SetChatEnabled provides a mock function with given fields: _a0
func (_m *Session) SetChatEnabled(_a0 bool) {
	_m.Called(_a0)
}

// SetCountry provides a mock function with given fields: _a0
func (_m *Session) SetCountry(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetCountry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetHasConfigFetched provides a mock function with given fields: _a0
func (_m *Session) SetHasConfigFetched(_a0 bool) {
	_m.Called(_a0)
}

// SetHasProxyFetched provides a mock function with given fields: _a0
func (_m *Session) SetHasProxyFetched(_a0 bool) {
	_m.Called(_a0)
}

// SetIP provides a mock function with given fields: _a0
func (_m *Session) SetIP(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetIP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOnSuccess provides a mock function with given fields: _a0
func (_m *Session) SetOnSuccess(_a0 bool) {
	_m.Called(_a0)
}

// SetReplicaAddr provides a mock function with given fields: _a0
func (_m *Session) SetReplicaAddr(_a0 string) {
	_m.Called(_a0)
}

// SetShowGoogleAds provides a mock function with given fields: _a0
func (_m *Session) SetShowGoogleAds(_a0 bool) {
	_m.Called(_a0)
}

// SetStaging provides a mock function with given fields: _a0
func (_m *Session) SetStaging(_a0 bool) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetStaging")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserIdAndToken provides a mock function with given fields: _a0, _a1
func (_m *Session) SetUserIdAndToken(_a0 int64, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetUserIdAndToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SplitTunnelingEnabled provides a mock function with given fields:
func (_m *Session) SplitTunnelingEnabled() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SplitTunnelingEnabled")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdSettings provides a mock function with given fields: _a0
func (_m *Session) UpdateAdSettings(_a0 AdSettings) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAdSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(AdSettings) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStats provides a mock function with given fields: serverCity, serverCountry, serverCountryCode, p3, p4, hasSucceedingProxy
func (_m *Session) UpdateStats(serverCity string, serverCountry string, serverCountryCode string, p3 int, p4 int, hasSucceedingProxy bool) error {
	ret := _m.Called(serverCity, serverCountry, serverCountryCode, p3, p4, hasSucceedingProxy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStats")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, int, bool) error); ok {
		r0 = rf(serverCity, serverCountry, serverCountryCode, p3, p4, hasSucceedingProxy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSession creates a new instance of Session. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSession(t interface {
	mock.TestingT
	Cleanup(func())
}) *Session {
	mock := &Session{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
