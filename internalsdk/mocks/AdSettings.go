// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	common "github.com/getlantern/lantern-client/internalsdk/common"
	mock "github.com/stretchr/testify/mock"
)

// AdSettings is an autogenerated mock type for the AdSettings type
type AdSettings struct {
	mock.Mock
}

// GetAdProvider provides a mock function with given fields: isPro, countryCode, daysSinceInstalled
func (_m *AdSettings) GetAdProvider(isPro bool, countryCode string, daysSinceInstalled int) (common.AdProvider, error) {
	ret := _m.Called(isPro, countryCode, daysSinceInstalled)

	if len(ret) == 0 {
		panic("no return value specified for GetAdProvider")
	}

	var r0 common.AdProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(bool, string, int) (common.AdProvider, error)); ok {
		return rf(isPro, countryCode, daysSinceInstalled)
	}
	if rf, ok := ret.Get(0).(func(bool, string, int) common.AdProvider); ok {
		r0 = rf(isPro, countryCode, daysSinceInstalled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.AdProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(bool, string, int) error); ok {
		r1 = rf(isPro, countryCode, daysSinceInstalled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdSettings creates a new instance of AdSettings. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdSettings(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdSettings {
	mock := &AdSettings{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
