/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */





/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) char* isUserFirstTime();
extern __declspec(dllexport) void setFirstTimeVisit();
extern __declspec(dllexport) char* isUserLoggedIn();
extern __declspec(dllexport) char* signup(char* email, char* password);
extern __declspec(dllexport) char* login(char* email, char* password);
extern __declspec(dllexport) char* logout();

// Send recovery code to user email
//
extern __declspec(dllexport) char* startRecoveryByEmail(char* email);

// Complete recovery by email
//
extern __declspec(dllexport) char* completeRecoveryByEmail(char* email, char* code, char* password);

// // This will validate code send by server
//
extern __declspec(dllexport) char* validateRecoveryByEmail(char* email, char* code);

// This will delete user accoutn and creates new user
//
extern __declspec(dllexport) char* deleteAccount(char* password);
extern __declspec(dllexport) char* start();
extern __declspec(dllexport) char* sysProxyOn();
extern __declspec(dllexport) void sysProxyOff();
extern __declspec(dllexport) char* websocketAddr();
extern __declspec(dllexport) void setProxyAll(char* value);

// this method is reposible for checking if the user has updated plan or bought plans
//
extern __declspec(dllexport) char* hasPlanUpdatedOrBuy();
extern __declspec(dllexport) char* applyRef(char* referralCode);
extern __declspec(dllexport) char* devices();
extern __declspec(dllexport) char* approveDevice(char* code);
extern __declspec(dllexport) char* removeDevice(char* deviceId);
extern __declspec(dllexport) char* userLinkValidate(char* code);
extern __declspec(dllexport) char* expiryDate();
extern __declspec(dllexport) char* userData();
extern __declspec(dllexport) char* emailAddress();
extern __declspec(dllexport) char* emailExists(char* email);
extern __declspec(dllexport) char* testProviderRequest(char* email, char* paymentProvider, char* plan);

// The function returns two C strings: the first represents success, and the second represents an error.
// If the redemption is successful, the first string contains "true", and the second string is nil.
// If an error occurs during redemption, the first string is nil, and the second string contains the error message.
//
extern __declspec(dllexport) char* redeemResellerCode(char* email, char* currency, char* deviceName, char* resellerCode);
extern __declspec(dllexport) char* referral();
extern __declspec(dllexport) char* myDeviceId();
extern __declspec(dllexport) char* lang();
extern __declspec(dllexport) void setSelectLang(char* lang);
extern __declspec(dllexport) char* country();
extern __declspec(dllexport) char* sdkVersion();
extern __declspec(dllexport) char* hasSucceedingProxy();
extern __declspec(dllexport) char* onBoardingStatus();
extern __declspec(dllexport) char* acceptedTermsVersion();
extern __declspec(dllexport) char* proUser();
extern __declspec(dllexport) char* deviceLinkingCode();
extern __declspec(dllexport) char* paymentRedirect(char* planID, char* currency, char* provider, char* email, char* deviceName);
extern __declspec(dllexport) void exitApp();
extern __declspec(dllexport) char* reportIssue(char* email, char* issueType, char* description);
extern __declspec(dllexport) char* checkUpdates();

#ifdef __cplusplus
}
#endif
