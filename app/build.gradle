apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

    ndkVersion "21.3.6528147"

    bundle {
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    flavorDimensions "versionCode"

    useLibrary 'org.apache.http.legacy'

    useLibrary 'android.test.runner'

    dexOptions {
        javaMaxHeapSize "8g"
        preDexLibraries true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/maven/commons-io/commons-io/pom.xml'
        exclude 'META-INF/maven/commons-io/commons-io/pom.properties'
        exclude 'README.txt'
    }

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    // Use now as the user-visible version
    def now = new java.util.Date()

    // Calculate the versionCode as the number of seconds from a fixed start
    // point so that it's always increasing.
    def start = new java.util.Date(2015, 1, 1).getTime()
    def code = (int) ((now.getTime() - start) / 1000)

    defaultConfig {

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ['resourcePackageName': 'org.getlantern.lantern', "androidManifestFile": "$projectDir/src/main/AndroidManifest.xml".toString()]
            }
        }

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        applicationId "org.getlantern.beam"
        versionCode code

        if (project.hasProperty('lanternVersion')) {
            versionName "$project.lanternVersion ($project.lanternRevisionDate)"
        } else {
            versionName "3.0.0"
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        release {
            if (project.hasProperty("KEYSTORE_FILE")) {
                storeFile file(KEYSTORE_FILE)
                keyAlias "Lantern Release Key"
                storePassword KEYSTORE_PWD
                keyPassword KEY_PWD
            }
        }
    }

    buildTypes {

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            // Run code coverage reports by default on debug builds.
            buildConfigField "boolean", "STICKY_CONFIG", getBoolean("stickyConfig")
            buildConfigField "boolean", "STAGING", getBoolean("useStaging")
            buildConfigField "boolean", "PLAY_VERSION", getBoolean("playVersion")
            buildConfigField "boolean", "YINBI_ENABLED", getBoolean("enableYinbi")
            buildConfigField "boolean", "PAYMENT_TEST_MODE", "true"
            buildConfigField "String", "COUNTRY", userCountry()
            buildConfigField "String", "PAYMENT_PROVIDER", paymentProvider()
            buildConfigField "String", "PRO_SERVER_URL", proServerUrl()
//            buildConfigField "String", "FORCE_COUNTRY", '"CN"' // we can force the build to act as if it's in a specific country like '"CN"' or '"IR"'
            buildConfigField "String", "FORCE_COUNTRY", '""'
        }

        release {
            minifyEnabled true
            shrinkResources true
            buildConfigField "boolean", "STICKY_CONFIG", getBoolean("stickyConfig")
            buildConfigField "boolean", "STAGING", getBoolean("useStaging")
            buildConfigField "boolean", "PLAY_VERSION", getBoolean("playVersion")
            buildConfigField "boolean", "YINBI_ENABLED", getBoolean("enableYinbi")
            buildConfigField "boolean", "PAYMENT_TEST_MODE", "false"
            buildConfigField "String", "COUNTRY", userCountry()
            buildConfigField "String", "PAYMENT_PROVIDER", paymentProvider()
            buildConfigField "String", "PRO_SERVER_URL", proServerUrl()
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "FORCE_COUNTRY", '""'

            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/prodRelease/out/lib/'
                strippedNativeLibsDir 'build/intermediates/stripped_native_libs/prodRelease/out/lib/'
            }
        }

    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    productFlavors {
        prod {
        }
        autoTest {
            minSdkVersion 19 // required by Stripe.
            versionCode 1 // so we can always test auto-update.
        }
    }

    splits {
        abi {
            enable true
            reset()
            include androidArchJava()
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

def androidArch() {
    def value = project.getProperties().get("androidArch")
    if (value == null || !value?.trim()) {
        return "all"
    }
    return value
}

def androidArchJava() {
    def value = project.getProperties().get("androidArchJava")
    if (value == null || !value?.trim()) {
        return "armeabi-v7a arm64-v8a x86 x86_64"
    }
    return value
}

def getBoolean(name) {
    def value = project.getProperties().get(name)
    if (value == null || !value?.trim()) {
        return "false"
    }
    return value
}

def userCountry() {
    def value = project.getProperties().get("country")
    if (value == null || !value?.trim()) {
        return "\"\""
    }
    return String.format("\"%s\"", value)
}

def paymentProvider() {
    def value = project.getProperties().get("paymentProvider")
    if (value == null || !value?.trim()) {
        return "\"\""
    }
    return String.format("\"%s\"", value)
}

def proServerUrl() {
    def value = project.getProperties().get("proServerUrl")
    if (value == null || !value?.trim()) {
        return "\"\""
    }
    return String.format("\"%s\"", value)
}

repositories {
    flatDir {
        dirs 'libs'
    }
    jcenter()
    google()
    mavenCentral()
    mavenLocal()
    maven { url  "http://dl.bintray.com/piasy/maven" }
    maven { url "https://www.jitpack.io" }
}

dependencies {
    implementation fileTree(dir: "libs", include:"libbeam-${androidArch()}.aar")

    implementation 'me.zhanghai.android.materialprogressbar:library:1.6.1'
    implementation(name:'paymentwall-android-sdk', ext: 'aar')

    implementation 'com.adyen.checkout:core:1.14.1'
    implementation 'com.adyen.checkout:utils:1.14.1'
    implementation 'com.adyen.checkout:ui:1.14.1'
    implementation 'com.adyen.checkout:cardscan:1.14.1'

    implementation project(':alipaySdk-15.6.5-20190718211148')
    implementation(name:'alipayadapter-release', ext: 'aar') {
        transitive = true
    }

    implementation 'io.github.inflationx:calligraphy3:3.0.0'
    implementation 'io.github.inflationx:viewpump:2.0.2'

    // https://mvnrepository.com/artifact/net.jodah/expiringmap
    implementation group: 'net.jodah', name: 'expiringmap', version: '0.5.9'

    implementation 'com.jaredrummler:android-processes:1.1.1'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.8'

    implementation 'com.ogaclejapan.smarttablayout:library:1.6.1@aar'
    //Optional: see how to use the utility.
    implementation 'com.ogaclejapan.smarttablayout:utils-v4:1.6.1@aar'

    implementation fileTree(dir: 'libs', include: '*.jar')

    implementation 'com.squareup.okhttp3:okhttp:3.12.6'

    implementation 'com.squareup.picasso:picasso:2.5.2'

    // The below aar is built from https://github.com/getlantern/FinestWebView-Android
    implementation(name:'finestwebview', ext: 'aar')
    implementation 'com.kyleduo.switchbutton:library:1.4.6'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

    implementation "com.google.android.gms:play-services-auth:18.1.0"
    implementation "com.google.android.gms:play-services-wallet:18.1.2"

    implementation platform('com.google.firebase:firebase-bom:25.12.0')
    implementation "com.google.firebase:firebase-analytics"
    implementation "com.google.firebase:firebase-config"

    implementation 'com.google.firebase:firebase-crashlytics-ndk'

    // https://mvnrepository.com/artifact/joda-time/joda-time
    implementation group: 'joda-time', name: 'joda-time', version: '2.8.2'


    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.3.0-alpha02'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'com.android.billingclient:billing:3.0.1'

    // lib that simplifies event bus communication between activities, fragments, threads, services, etc
    implementation 'org.greenrobot:eventbus:3.1.1'

    implementation group: 'commons-codec', name: 'commons-codec', version: '1.12'

    // https://mvnrepository.com/artifact/javax.mail/mail
    implementation group: 'javax.mail', name: 'mail', version: '1.4.7'

    // FinestWebView dependencies
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'com.thefinestartist:utils:0.9.0'

    implementation 'com.stripe:stripe-android:10.3.1'
    implementation 'info.hoang8f:android-segmented:1.0.6'

    implementation 'com.github.bumptech.glide:glide:4.9.0'

    implementation 'com.github.piasy:BigImageViewer:1.4.6'

    // load with glide
    implementation 'com.github.piasy:GlideImageLoader:1.4.6'

    implementation (group: 'com.google.guava', name: 'guava', version: '23.0-android') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }

    annotationProcessor 'org.androidannotations:androidannotations:' + androidAnnotationsVersion
    annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'
    implementation("org.androidannotations:androidannotations-api:" + androidAnnotationsVersion)

    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.3.0'

    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:2.1'

    testImplementation 'junit:junit:4.13'

    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

apply plugin: 'com.google.gms.google-services'

task buildLibLantern(type: Exec, description: 'Build Go library') {
    environment "ANDROID_ARCH", androidArch()
    environment "APP", "beam"
    workingDir '../../'
    commandLine 'make', 'android-lib'
}

task cleanLibLantern(type: Exec, description: 'Clean Go library') {
    environment "ANDROID_ARCH", androidArch()
    environment "APP", "beam"
    workingDir '../../'
    commandLine 'make', 'clean-android'
}

clean.dependsOn 'cleanLibLantern'

tasks.whenTaskAdded { task ->
    if (!task.name.contains("assemble")) {
        task.dependsOn buildLibLantern
    }
}