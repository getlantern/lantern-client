plugins {
    id "io.sentry.android.gradle" version "2.1.2"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.protobuf'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    ndkVersion "23.0.7599858"

    bundle {
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    flavorDimensions "versionCode"

    useLibrary 'org.apache.http.legacy'

//    useLibrary 'android.test.runner'

    dexOptions {
        javaMaxHeapSize "8g"
        preDexLibraries true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/maven/commons-io/commons-io/pom.xml'
        exclude 'META-INF/maven/commons-io/commons-io/pom.properties'
        exclude("META-INF/*.kotlin_module")
        exclude 'README.txt'
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    // Use now as the user-visible version
    def now = new Date()

    // Use configured versionCode if available
    def code = getInt("versionCode")

    if (code == 0) {
        // Calculate the versionCode as the number of seconds from a fixed start
        // point so that it's always increasing.
        def start = new Date(2015, 1, 1).getTime()
        code = (int) ((now.getTime() - start) / 1000)
    }

    defaultConfig {
        // Ensure all ABIs are included
        ndk { abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64' }
        // Include this CMakeLists.txt file in the build pipeline
        externalNativeBuild {
            cmake {
                cppFlags ''
                arguments '-DANDROID_STL=c++_shared'
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ['resourcePackageName': 'org.getlantern.lantern', "androidManifestFile": "$projectDir/src/main/AndroidManifest.xml".toString()]
            }
        }

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        applicationId "org.getlantern.lantern"
        versionCode code

        if (project.hasProperty('lanternVersion')) {
            versionName "$project.lanternVersion ($project.lanternRevisionDate)"
        } else {
            versionName "3.0.0"
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    externalNativeBuild {
        cmake {
            path file('cmake/CMakeLists.txt')
            version '3.10.2'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        release {
            if (project.hasProperty("KEYSTORE_FILE")) {
                storeFile file(KEYSTORE_FILE)
                keyAlias "Lantern Release Key"
                storePassword KEYSTORE_PWD
                keyPassword KEY_PWD
            }
        }
    }

    buildTypes {

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            // Run code coverage reports by default on debug builds.
            buildConfigField "boolean", "DEVELOPMENT_MODE", "true"
            buildConfigField "boolean", "STICKY_CONFIG", getBoolean("stickyConfig")
            buildConfigField "boolean", "STAGING", getBoolean("useStaging")
            buildConfigField "boolean", "PLAY_VERSION", getBoolean("playVersion")
            buildConfigField "String", "COUNTRY", userCountry()
            buildConfigField "String", "PAYMENT_PROVIDER", paymentProvider()
            buildConfigField "String", "PRO_SERVER_URL", proServerUrl()
            buildConfigField "String", "SIGNING_CERTIFICATE_SHA256", "\"\""
            buildConfigField "String", "LOCONF_URL", '"https://raw.githubusercontent.com/getlantern/loconf/master/test-messages.json"'
            buildConfigField "String", "PRIVACY_POLICY_URL", '"https://s3.amazonaws.com/lantern/LanternPrivacyPolicy.pdf"'
            buildConfigField "String", "TERMS_OF_SERVICE_URL", '"https://s3.amazonaws.com/lantern/Lantern-TOS.pdf"'
        }

        profile {
            minifyEnabled false
            shrinkResources false
            debuggable false
            buildConfigField "boolean", "DEVELOPMENT_MODE", "true"
            buildConfigField "boolean", "STICKY_CONFIG", getBoolean("stickyConfig")
            buildConfigField "boolean", "STAGING", getBoolean("useStaging")
            buildConfigField "boolean", "PLAY_VERSION", getBoolean("playVersion")
            buildConfigField "String", "COUNTRY", userCountry()
            buildConfigField "String", "SIGNING_CERTIFICATE_SHA256", "\"\""
            buildConfigField "String", "PAYMENT_PROVIDER", paymentProvider()
            buildConfigField "String", "PRO_SERVER_URL", proServerUrl()
            buildConfigField "String", "LOCONF_URL", '"https://raw.githubusercontent.com/getlantern/loconf/master/test-messages.json"'
            buildConfigField "String", "PRIVACY_POLICY_URL", '"https://s3.amazonaws.com/lantern/LanternPrivacyPolicy.pdf"'
            buildConfigField "String", "TERMS_OF_SERVICE_URL", '"https://s3.amazonaws.com/lantern/Lantern-TOS.pdf"'
        }

        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            buildConfigField "boolean", "DEVELOPMENT_MODE", "false"
            buildConfigField "boolean", "STICKY_CONFIG", getBoolean("stickyConfig")
            buildConfigField "boolean", "STAGING", getBoolean("useStaging")
            buildConfigField "boolean", "PLAY_VERSION", getBoolean("playVersion")
            buildConfigField "String", "COUNTRY", userCountry()
            buildConfigField "String", "SIGNING_CERTIFICATE_SHA256", "\"108f612ae55354078ec12b10bb705362840d48fa78b9262c11b6d0adeff6f289\""
            buildConfigField "String", "PAYMENT_PROVIDER", paymentProvider()
            buildConfigField "String", "PRO_SERVER_URL", proServerUrl()
            buildConfigField "String", "LOCONF_URL", '"https://raw.githubusercontent.com/getlantern/loconf/master/messages.json"'
            buildConfigField "String", "PRIVACY_POLICY_URL", '"https://s3.amazonaws.com/lantern/LanternPrivacyPolicy.pdf"'
            buildConfigField "String", "TERMS_OF_SERVICE_URL", '"https://s3.amazonaws.com/lantern/Lantern-TOS.pdf"'

            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java.srcDirs += 'src/main/kotlin'
            proto.srcDirs += '../../protos_shared'
        }
    }

    productFlavors {
        prod {
        }
        autoTest {
            versionCode 1 // so we can always test auto-update.
        }
    }

    splits {
        abi {
            enable true
            reset()
            include androidArchJava()
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

def androidArch() {
    def value = project.getProperties().get("androidArch")
    if (value == null || !value?.trim()) {
        return "all"
    }
    return value
}

def androidArchJava() {
    def value = project.getProperties().get("androidArchJava")
    if (value == null || !value?.trim()) {
        return "armeabi-v7a arm64-v8a x86 x86_64"
    }
    return value
}

def getBoolean(name) {
    def value = project.getProperties().get(name)
    if (value == null || !value?.trim()) {
        return "false"
    }
    return value
}

def getInt(name) {
    def value = project.getProperties().get(name)
    if (value == null || !value?.trim()) {
        return 0
    }
    return value.toInteger()
}

def userCountry() {
    def value = project.getProperties().get("country")
    if (value == null || !value?.trim()) {
        return "\"\""
    }
    return String.format("\"%s\"", value)
}

def paymentProvider() {
    def value = project.getProperties().get("paymentProvider")
    if (value == null || !value?.trim()) {
        return "\"\""
    }
    return String.format("\"%s\"", value)
}

def proServerUrl() {
    def value = project.getProperties().get("proServerUrl")
    if (value == null || !value?.trim()) {
        return "\"\""
    }
    return String.format("\"%s\"", value)
}

repositories {
    flatDir {
        dirs 'libs'
    }
    jcenter()
    google()
    mavenCentral()
    mavenLocal()
    maven { url  "https://dl.bintray.com/piasy/maven" }
    maven { url "https://www.jitpack.io" }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-collections-immutable-jvm:0.3.3"
    implementation 'com.google.protobuf:protobuf-javalite:3.10.0'

    implementation fileTree(dir: "libs", include:"liblantern-${androidArch()}.aar")

    implementation(name:'paymentwall-android-sdk', ext: 'aar')

    implementation project(':alipaySdk-15.6.5-20190718211148')
    implementation(name:'alipayadapter-release', ext: 'aar') {
        transitive = true
    }

    // https://mvnrepository.com/artifact/net.jodah/expiringmap
    implementation group: 'net.jodah', name: 'expiringmap', version: '0.5.9'

    implementation 'com.ogaclejapan.smarttablayout:library:1.6.1@aar'
    implementation 'com.ogaclejapan.smarttablayout:utils-v4:1.6.1@aar'

    implementation fileTree(dir: 'libs', include: '*.jar')

    implementation 'com.squareup.okhttp3:okhttp:4.9.2'

    // The below aar is built from https://github.com/getlantern/FinestWebView-Android
    implementation(name:'finestwebview', ext: 'aar')
    implementation 'com.kyleduo.switchbutton:library:1.4.6'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'


    // https://mvnrepository.com/artifact/joda-time/joda-time
    implementation group: 'joda-time', name: 'joda-time', version: '2.8.2'


    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.android.billingclient:billing:3.0.1'
    implementation "androidx.constraintlayout:constraintlayout:2.1.0-beta01"
    implementation "androidx.recyclerview:recyclerview:1.2.0-rc01"

    // lib that simplifies event bus communication between activities, fragments, threads, services, etc
    implementation 'org.greenrobot:eventbus:3.1.1'

    implementation group: 'commons-codec', name: 'commons-codec', version: '1.12'

    // https://mvnrepository.com/artifact/javax.mail/mail
    implementation group: 'javax.mail', name: 'mail', version: '1.4.7'

    // FinestWebView dependencies
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'com.thefinestartist:utils:0.9.0'
    implementation (group: 'com.google.guava', name: 'guava', version: '23.0-android') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }

    implementation 'com.stripe:stripe-android:16.10.2'

    implementation 'com.github.bumptech.glide:glide:4.9.0'

    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:28.2.0')

    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-config'

    implementation 'io.sentry:sentry-android:5.1.2'

    annotationProcessor "org.androidannotations:androidannotations:$androidAnnotationsVersion"
    kapt 'com.github.bumptech.glide:compiler:4.7.1'
    implementation("org.androidannotations:androidannotations-api:$androidAnnotationsVersion")
    kapt "org.androidannotations:androidannotations:$androidAnnotationsVersion"

    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'

    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'com.squareup.okhttp3:okhttp:4.9.2'

    testImplementation 'junit:junit:4.13.1'

    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "com.github.YarikSOffice:lingver:1.3.0"
    // from https://github.com/getlantern/opus_android
    implementation(name:'opuslib-release', ext: 'aar')
    implementation 'com.github.getlantern:secrets-android:35b26fe8f8'
    implementation 'com.github.getlantern:messaging-android:0071ebb8cc'
}

apply plugin: 'com.google.gms.google-services'

sentry {
    // Enables or disables the automatic upload of mapping files
    // during a build.  If you disable this, you'll need to manually
    // upload the mapping files with sentry-cli when you do a release.
    autoUpload = true

    // Disables or enables the automatic configuration of Native Symbols
    // for Sentry. This executes sentry-cli automatically so
    // you don't need to do it manually.
    // Default is disabled.
    uploadNativeSymbols = true

    // Does or doesn't include the source code of native code for Sentry.
    // This executes sentry-cli with the --include-sources param. automatically so
    // you don't need to do it manually.
    // Default is disabled.
    includeNativeSources = false
}
