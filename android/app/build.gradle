plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'com.google.protobuf'
    id 'dev.flutter.flutter-gradle-plugin'
    id 'org.jlleitschuh.gradle.ktlint'
}

android {
    namespace 'org.getlantern.lantern'
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    ndkVersion "27.0.12077973"
    flavorDimensions "versionCode"
    useLibrary 'org.apache.http.legacy'

    bundle {
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
        language {
            // Specifies that the app bundle should not support configuration APKs for language resources.
            // These resources are instead packaged with each base and dynamic feature APK.
            // See https://stackoverflow.com/a/52733674
            enableSplit = false
        }
    }

    // Use legacy packaging to helps reduce apk size
    packagingOptions{
        exclude "DebugProbesKt.bin"
        jniLibs {
            useLegacyPackaging true
        }
    }

    // Use now as the user-visible version
    def now = new Date()

    // Use configured versionCode if available

    def code = getInt("versionCode")

    if (code == 0) {
        // Calculate the versionCode as the number of seconds from a fixed start
        // point so that it's always increasing.
        def start = new Date(2015, 1, 1).getTime()
        code = (int) ((now.getTime() - start) / 1000)
    }

    defaultConfig {
        multiDexEnabled = true
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        applicationId "org.getlantern.lantern"
        versionCode code

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ['resourcePackageName': 'org.getlantern.lantern', "androidManifestFile": "$projectDir/src/main/AndroidManifest.xml".toString()]
            }
        }
        ndk {
            // Specifies the ABI configurations of native libraries Gradle should build and package with the app.
            abiFilters = ["x86_64", "arm64-v8a"]
            debugSymbolLevel 'FULL'
        }

        if (project.hasProperty('lanternVersion')) {
            versionName "$project.lanternVersion ($project.lanternRevisionDate)"
        } else {
            versionName "9999.99.99"
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
//    kotlin {
//        jvmToolchain(17)
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled = true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }


    signingConfigs {
        release {
            if (project.hasProperty("KEYSTORE_FILE")) {
                storeFile file(KEYSTORE_FILE)
                keyAlias "Lantern Release Key"
                storePassword KEYSTORE_PWD
                keyPassword KEY_PWD
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            buildConfigField "boolean", "DEVELOPMENT_MODE", "true"
            buildConfigField "boolean", "CI", getBoolean("ci")
            buildConfigField "boolean", "STICKY_CONFIG", getBoolean("stickyConfig")
            buildConfigField "boolean", "STAGING", getBoolean("useStaging")
            buildConfigField "boolean", "PLAY_VERSION", getBoolean("playVersion")
            buildConfigField "String", "COUNTRY", userCountry()
            buildConfigField "String", "SIGNING_CERTIFICATE_SHA256", "\"\""

        }

        profile {
            minifyEnabled false
            shrinkResources false
            debuggable false
            buildConfigField "boolean", "DEVELOPMENT_MODE", "true"
            buildConfigField "boolean", "CI", getBoolean("ci")
            buildConfigField "boolean", "STICKY_CONFIG", getBoolean("stickyConfig")
            buildConfigField "boolean", "STAGING", getBoolean("useStaging")
            buildConfigField "boolean", "PLAY_VERSION", getBoolean("playVersion")
            buildConfigField "String", "COUNTRY", userCountry()
            buildConfigField "String", "SIGNING_CERTIFICATE_SHA256", "\"\""
        }

        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "boolean", "DEVELOPMENT_MODE", getBoolean("developmentMode")
            buildConfigField "boolean", "CI", "false"
            buildConfigField "boolean", "STICKY_CONFIG", getBoolean("stickyConfig")
            buildConfigField "boolean", "STAGING", getBoolean("useStaging")
            buildConfigField "boolean", "PLAY_VERSION", getBoolean("playVersion")
            buildConfigField "String", "COUNTRY", userCountry()
            buildConfigField "String", "SIGNING_CERTIFICATE_SHA256", "\"108f612ae55354078ec12b10bb705362840d48fa78b9262c11b6d0adeff6f289\""
        }

        play {
            initWith release
            buildConfigField "boolean", "PLAY_VERSION", "true"
            ndk.abiFilters = abiFilters()
        }

        sideload {
            initWith release
            buildConfigField "boolean", "PLAY_VERSION", "false"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java.srcDirs += 'src/main/kotlin'
            proto.srcDirs += '../../protos_shared'
        }
    }

    productFlavors {
        prod {
        }
        autoTest {
            versionCode 1 // so we can always test auto-update.
        }
        appiumTest {
            buildConfigField "boolean", "CI", "true"
        }
    }

    splits {
        abi {
            enable !bool("playVersion")
            reset()
            include androidArchJava()
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

tasks.register('zipDebugSymbols') {
    description "Generates a ZIP file containing debug symbols for the app"
    doLast {
        def flutterRootDir = rootDir.parentFile
        def debugSymbolsDir = file("${flutterRootDir}/build/app/intermediates/merged_native_libs/prodPlay/mergeProdPlayNativeLibs/out/lib")
        def outputDir = file("${flutterRootDir}/build/outputs/debug-symbols")
        outputDir.mkdirs()
        copy {
            from debugSymbolsDir
            into outputDir
        }
        ant.zip(destfile: "${outputDir}/debug-symbols.zip") {
            fileset(dir: debugSymbolsDir)
        }
        println "Debug symbols ZIP created at: ${outputDir}/debug-symbols.zip"
    }
}


def androidArch() {
    def value = project.getProperties().get("androidArch")
    if (value == null || !value?.trim()) {
        return "all"
    }
    return value
}

def androidArchJava() {
    def value = project.getProperties().get("androidArchJava")
    if (value == null || !value?.trim()) {
        return "armeabi-v7a arm64-v8a x86_64"
    }
    return value
}

def getBoolean(name) {
    def value = project.getProperties().get(name)
    if (value == null || !value?.trim()) {
        return "false"
    }
    return value
}

def bool(name) {
    def value = project.getProperties().get(name)
    return "true".equalsIgnoreCase(value)
}

def abiFilters() {
    if (bool("playVersion")) {
        // Flutter does not support 32 bit x86. Some of our other native libraries do
        // support x86, which by default means that we'll include an x86 folder of native
        // libs. When this is present, 32 bit x86 devices will attempt to run the app as an
        // x86 app and will crash because there's no x86 flutter.so. As a workaround for
        // this, we omit the x86 architecture entirely so that such clients will run Lantern
        // in ARM emulated mode.
        //
        // SO, DO NOT INCLUDE x86 HERE!!!
        return ['arm64-v8a', 'armeabi-v7a', 'x86_64']
    }
    return []
}

def getInt(name) {
    def value = project.getProperties().get(name)
    if (value == null || !value?.trim()) {
        return 0
    }
    return value.toInteger()
}

def userCountry() {
    def value = project.getProperties().get("country")
    if (value == null || !value?.trim()) {
        return "\"\""
    }
    return String.format("\"%s\"", value)
}

def paymentProvider() {
    def value = project.getProperties().get("paymentProvider")
    if (value == null || !value?.trim()) {
        return "\"\""
    }
    return String.format("\"%s\"", value)
}

def proServerUrl() {
    def value = project.getProperties().get("proServerUrl")
    if (value == null || !value?.trim()) {
        return "\"\""
    }
    return String.format("\"%s\"", value)
}

repositories {
    flatDir {
        dirs 'libs'
    }
    google()
    mavenCentral()
    mavenLocal()
    maven { url "https://www.jitpack.io" }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protoc_version"
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        output.versionCodeOverride = android.defaultConfig.versionCode
    }
}

flutter {
    source '../..'
}

configurations {
    debugImplementation.exclude group: "junit", module: "junit"
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-collections-immutable-jvm:0.3.8"
    implementation "com.google.protobuf:protobuf-javalite:$protoc_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.2'

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugarJdk"
    implementation fileTree(dir: "libs", include: "liblantern-${androidArch()}.aar")
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'androidx.webkit:webkit:1.14.0'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    // https://mvnrepository.com/artifact/joda-time/joda-time
    implementation group: 'joda-time', name: 'joda-time', version: '2.8.2'

    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'

    // Google Play libraries
    implementation 'com.android.billingclient:billing:7.0.0'

    implementation 'com.stripe:stripe-android:20.17.0'

    implementation files('libs/opuslib-release.aar')
    implementation 'com.github.getlantern:secrets-android:f6a7a69f3d'


    implementation 'com.github.getlantern:db-android:a137a028d4'
    implementation 'com.github.getlantern:messaging-android:4c346e64ee'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'
    //Test implementation
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.annotation:annotation:1.8.2'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.6.1'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'

    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'
    androidTestImplementation 'com.squareup.okhttp3:okhttp:4.9.2'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "io.mockk:mockk:1.13.5"
}

